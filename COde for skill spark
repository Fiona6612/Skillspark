<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SkillSpark - AI Learning Companion</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .header h1 {
            color: white;
            font-size: 2.5em;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }

        .header p {
            color: rgba(255, 255, 255, 0.9);
            font-size: 1.2em;
        }

        .nav-buttons {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .nav-btn {
            background: rgba(255, 255, 255, 0.15);
            backdrop-filter: blur(10px);
            border: none;
            border-radius: 15px;
            padding: 25px;
            color: white;
            font-size: 1.1em;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .nav-btn:hover {
            background: rgba(255, 255, 255, 0.25);
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        }

        .nav-btn.active {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
        }

        .section {
            display: none;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 30px;
            margin-bottom: 20px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
        }

        .section.active {
            display: block;
        }

        .section h2 {
            color: #4a5568;
            margin-bottom: 20px;
            font-size: 1.8em;
        }

        /* Chatbot Styles */
        .chat-container {
            max-height: 400px;
            overflow-y: auto;
            background: #f7fafc;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            border: 1px solid #e2e8f0;
        }

        .message {
            margin-bottom: 15px;
            padding: 12px 16px;
            border-radius: 12px;
            max-width: 80%;
            animation: fadeIn 0.3s ease;
        }

        .user-message {
            background: #667eea;
            color: white;
            margin-left: auto;
        }

        .bot-message {
            background: #e2e8f0;
            color: #2d3748;
        }

        .chat-input-container {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }

        .chat-input {
            flex: 1;
            padding: 12px 16px;
            border: 2px solid #e2e8f0;
            border-radius: 10px;
            font-size: 16px;
            outline: none;
            transition: border-color 0.3s ease;
        }

        .chat-input:focus {
            border-color: #667eea;
        }

        .send-btn {
            background: #667eea;
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 10px;
            cursor: pointer;
            font-size: 16px;
            transition: background 0.3s ease;
        }

        .send-btn:hover {
            background: #5a67d8;
        }

        /* Quiz Styles */
        .quiz-selection {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }

        .quiz-btn {
            background: #667eea;
            color: white;
            border: none;
            padding: 15px;
            border-radius: 10px;
            cursor: pointer;
            font-size: 16px;
            transition: all 0.3s ease;
        }

        .quiz-btn:hover {
            background: #5a67d8;
            transform: translateY(-2px);
        }

        .quiz-container {
            background: #f7fafc;
            border-radius: 15px;
            padding: 25px;
            margin-top: 20px;
        }

        .question {
            font-size: 1.1em;
            margin-bottom: 15px;
            font-weight: 600;
        }

        .options {
            display: grid;
            gap: 10px;
            margin-bottom: 20px;
        }

        .option {
            background: white;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            padding: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .option:hover {
            border-color: #667eea;
            background: #f0f4ff;
        }

        .option.selected {
            border-color: #667eea;
            background: #e6f3ff;
        }

        .option.correct {
            border-color: #38a169;
            background: #f0fff4;
        }

        .option.incorrect {
            border-color: #e53e3e;
            background: #fff5f5;
        }

        /* Progress Styles */
        .progress-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
        }

        .progress-card {
            background: #f7fafc;
            border-radius: 15px;
            padding: 20px;
            border: 1px solid #e2e8f0;
        }

        .progress-bar {
            width: 100%;
            height: 20px;
            background: #e2e8f0;
            border-radius: 10px;
            overflow: hidden;
            margin-top: 10px;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #667eea, #764ba2);
            transition: width 0.3s ease;
        }

        /* Study Planner Styles */
        .planner-form {
            display: grid;
            gap: 20px;
            margin-bottom: 20px;
        }

        .form-group {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .form-group label {
            font-weight: 600;
            color: #4a5568;
        }

        .form-group input,
        .form-group select {
            padding: 12px;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            font-size: 16px;
            outline: none;
        }

        .form-group input:focus,
        .form-group select:focus {
            border-color: #667eea;
        }

        .schedule-display {
            background: #f7fafc;
            border-radius: 15px;
            padding: 20px;
            margin-top: 20px;
        }

        .day-schedule {
            background: white;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 15px;
            border-left: 4px solid #667eea;
        }

        /* Motivational Styles */
        .motivation-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 20px;
            padding: 30px;
            text-align: center;
            margin-bottom: 20px;
        }

        .motivation-card h3 {
            font-size: 1.5em;
            margin-bottom: 15px;
        }

        .motivation-card p {
            font-size: 1.1em;
            opacity: 0.9;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }

            .header h1 {
                font-size: 2em;
            }

            .nav-buttons {
                grid-template-columns: 1fr;
            }

            .message {
                max-width: 95%;
            }
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .btn {
            background: #667eea;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            transition: all 0.3s ease;
        }

        .btn:hover {
            background: #5a67d8;
            transform: translateY(-2px);
        }

        .results-container {
            background: #f7fafc;
            border-radius: 15px;
            padding: 20px;
            margin-top: 20px;
            text-align: center;
        }

        .score-display {
            font-size: 2em;
            font-weight: bold;
            color: #667eea;
            margin-bottom: 15px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üéØ SkillSpark</h1>
            <p>Your AI Learning Companion for Class 8 NCERT</p>
        </div>

        <div class="nav-buttons">
            <button class="nav-btn active" onclick="showSection('chatbot')">ü§ñ Doubt Solver</button>
            <button class="nav-btn" onclick="showSection('quiz')">üìù Quiz Generator</button>
            <button class="nav-btn" onclick="showSection('planner')">üìÖ Study Planner</button>
            <button class="nav-btn" onclick="showSection('progress')">üìä Progress Tracker</button>
            <button class="nav-btn" onclick="showSection('motivation')">‚ú® Daily Motivation</button>
        </div>

        <!-- Chatbot Section -->
        <div id="chatbot" class="section active">
            <h2>ü§ñ AI Doubt Solver</h2>
            <div class="chat-container" id="chatContainer">
                <div class="message bot-message">
                    <strong>SkillSpark Bot:</strong> Hi! I'm here to help you with Class 8 Science, Maths, and English Grammar questions. Ask me anything! üòä
                </div>
            </div>
            <div class="chat-input-container">
                <input type="text" id="chatInput" class="chat-input" placeholder="Ask your doubt here..." onkeypress="handleEnter(event)">
                <button class="send-btn" onclick="sendMessage()">Send</button>
            </div>
        </div>

        <!-- Quiz Section -->
        <div id="quiz" class="section">
            <h2>üìù Smart Quiz Generator</h2>
            <div class="quiz-selection">
                <button class="quiz-btn" onclick="startQuiz('science')">üß™ Science Quiz</button>
                <button class="quiz-btn" onclick="startQuiz('maths')">üî¢ Maths Quiz</button>
                <button class="quiz-btn" onclick="startQuiz('english')">üìñ English Grammar Quiz</button>
            </div>
            <div id="quizContainer"></div>
        </div>

        <!-- Study Planner Section -->
        <div id="planner" class="section">
            <h2>üìÖ Personal Study Planner</h2>
            <div class="planner-form">
                <div class="form-group">
                    <label>Select Subjects:</label>
                    <select id="plannerSubjects" multiple>
                        <option value="science">Science</option>
                        <option value="maths">Mathematics</option>
                        <option value="english">English Grammar</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Daily Study Time (hours):</label>
                    <input type="number" id="studyTime" min="1" max="8" value="2">
                </div>
                <div class="form-group">
                    <label>Exam Date:</label>
                    <input type="date" id="examDate">
                </div>
                <button class="btn" onclick="generatePlan()">Generate Study Plan</button>
            </div>
            <div id="scheduleDisplay"></div>
        </div>

        <!-- Progress Section -->
        <div id="progress" class="section">
            <h2>üìä Progress Tracker</h2>
            <div class="progress-grid">
                <div class="progress-card">
                    <h3>üìö Topics Completed</h3>
                    <div class="progress-bar">
                        <div class="progress-fill" id="topicsProgress" style="width: 0%"></div>
                    </div>
                    <p id="topicsText">0/30 topics completed</p>
                </div>
                <div class="progress-card">
                    <h3>üéØ Quiz Average</h3>
                    <div class="progress-bar">
                        <div class="progress-fill" id="quizProgress" style="width: 0%"></div>
                    </div>
                    <p id="quizText">Average: 0%</p>
                </div>
                <div class="progress-card">
                    <h3>‚≠ê Streak</h3>
                    <div class="progress-bar">
                        <div class="progress-fill" id="streakProgress" style="width: 0%"></div>
                    </div>
                    <p id="streakText">0 days streak</p>
                </div>
            </div>
        </div>

        <!-- Motivation Section -->
        <div id="motivation" class="section">
            <h2>‚ú® Daily Motivation</h2>
            <div class="motivation-card">
                <h3>üí° Daily Quote</h3>
                <p id="dailyQuote">Loading...</p>
            </div>
            <div class="motivation-card">
                <h3>üìù Study Tip</h3>
                <p id="studyTip">Loading...</p>
            </div>
        </div>
    </div>

    <script>
        // Knowledge Base for Chatbot
        const knowledgeBase = {
            // Science Questions
            "force": "Force is a push or pull acting on an object. It can change the state of motion or shape of an object. SI unit is Newton (N).",
            "pressure": "Pressure is force per unit area. Formula: P = F/A. SI unit is Pascal (Pa).",
            "friction": "Friction is the force that opposes motion between surfaces in contact. Types: Static, Kinetic, Rolling, and Fluid friction.",
            "sound": "Sound is produced by vibrating objects. It travels through medium as waves. Speed of sound in air is 343 m/s at room temperature.",
            "cell": "Cell is the basic unit of life. Types: Prokaryotic (no nucleus) and Eukaryotic (has nucleus).",
            "combustion": "Combustion is a chemical process where a substance reacts with oxygen to produce heat and light. Types: Complete and Incomplete combustion.",
            
            // Maths Questions
            "rational numbers": "Rational numbers are numbers that can be expressed as p/q where p and q are integers and q ‚â† 0. Examples: 1/2, -3/4, 0.5",
            "linear equations": "Linear equation in one variable has the form ax + b = 0. To solve: isolate x by performing same operations on both sides.",
            "exponents": "If a is multiplied by itself n times, it's written as a^n. Laws: a^m √ó a^n = a^(m+n), (a^m)^n = a^(mn)",
            "mensuration": "Mensuration deals with measurement of geometric figures. Area of rectangle = l√ób, Area of triangle = (1/2)√ób√óh",
            "algebra": "Algebra uses letters and symbols to represent numbers and quantities in formulas and equations.",
            "factorization": "Factorization is expressing a number or expression as a product of its factors. Example: x¬≤ - 4 = (x+2)(x-2)",
            
            // English Grammar Questions
            "tenses": "Tenses show the time of action. Types: Present (Simple, Continuous, Perfect), Past (Simple, Continuous, Perfect), Future (Simple, Continuous, Perfect)",
            "active passive": "Active voice: Subject performs action. Passive voice: Subject receives action. Example: Active: 'I eat apple' ‚Üí Passive: 'Apple is eaten by me'",
            "parts of speech": "8 parts of speech: Noun, Pronoun, Verb, Adjective, Adverb, Preposition, Conjunction, Interjection",
            "prepositions": "Prepositions show relationship between words. Examples: in, on, at, by, for, with, from, to, under, over",
            "articles": "Articles are a, an, the. 'A' and 'an' are indefinite articles. 'The' is definite article.",
            "pronouns": "Pronouns replace nouns. Types: Personal (I, you, he), Possessive (my, his, her), Demonstrative (this, that, these, those)"
        };

        // Quiz Questions Database
        const quizDatabase = {
            science: [
                {
                    question: "What is the SI unit of force?",
                    options: ["Newton", "Pascal", "Joule", "Watt"],
                    correct: 0,
                    explanation: "Newton (N) is the SI unit of force, named after Sir Isaac Newton."
                },
                {
                    question: "Which type of friction is the weakest?",
                    options: ["Static friction", "Kinetic friction", "Rolling friction", "Fluid friction"],
                    correct: 2,
                    explanation: "Rolling friction is the weakest type of friction as objects roll rather than slide."
                },
                {
                    question: "Sound cannot travel through:",
                    options: ["Water", "Air", "Vacuum", "Steel"],
                    correct: 2,
                    explanation: "Sound requires a medium to travel and cannot travel through vacuum."
                },
                {
                    question: "What is the basic unit of life?",
                    options: ["Tissue", "Organ", "Cell", "Organism"],
                    correct: 2,
                    explanation: "Cell is the basic structural and functional unit of life."
                },
                {
                    question: "Complete combustion produces:",
                    options: ["CO and H2O", "CO2 and H2O", "CO2 and H2", "CO and O2"],
                    correct: 1,
                    explanation: "Complete combustion of hydrocarbons produces carbon dioxide and water."
                }
            ],
            maths: [
                {
                    question: "Which of the following is a rational number?",
                    options: ["‚àö2", "œÄ", "3/4", "‚àö3"],
                    correct: 2,
                    explanation: "3/4 can be expressed as p/q form, making it a rational number."
                },
                {
                    question: "What is 2¬≥ √ó 2¬≤?",
                    options: ["2‚Åµ", "2‚Å∂", "4‚Åµ", "4‚Å∂"],
                    correct: 0,
                    explanation: "Using the law a^m √ó a^n = a^(m+n), we get 2¬≥ √ó 2¬≤ = 2‚Åµ"
                },
                {
                    question: "Area of a triangle with base 6 cm and height 4 cm:",
                    options: ["24 cm¬≤", "12 cm¬≤", "10 cm¬≤", "6 cm¬≤"],
                    correct: 1,
                    explanation: "Area of triangle = (1/2) √ó base √ó height = (1/2) √ó 6 √ó 4 = 12 cm¬≤"
                },
                {
                    question: "If x + 5 = 12, then x = ?",
                    options: ["7", "17", "5", "12"],
                    correct: 0,
                    explanation: "Solving: x + 5 = 12, so x = 12 - 5 = 7"
                },
                {
                    question: "Factorize: x¬≤ - 9",
                    options: ["(x-3)(x-3)", "(x+3)(x+3)", "(x+3)(x-3)", "x(x-9)"],
                    correct: 2,
                    explanation: "x¬≤ - 9 = x¬≤ - 3¬≤ = (x+3)(x-3) using difference of squares formula"
                }
            ],
            english: [
                {
                    question: "Which tense is used in 'I have been studying'?",
                    options: ["Present Perfect", "Present Perfect Continuous", "Past Perfect", "Future Perfect"],
                    correct: 1,
                    explanation: "Present Perfect Continuous tense shows action that started in past and continues to present."
                },
                {
                    question: "Convert to passive: 'She writes a letter'",
                    options: ["A letter is written by her", "A letter was written by her", "A letter writes her", "She is written by a letter"],
                    correct: 0,
                    explanation: "In passive voice, the object becomes subject: 'A letter is written by her'"
                },
                {
                    question: "What part of speech is 'quickly'?",
                    options: ["Adjective", "Adverb", "Noun", "Verb"],
                    correct: 1,
                    explanation: "Adverbs modify verbs, adjectives, or other adverbs. 'Quickly' describes how an action is done."
                },
                {
                    question: "Choose the correct preposition: 'The book is ___ the table'",
                    options: ["in", "on", "at", "by"],
                    correct: 1,
                    explanation: "'On' is used to show position on a surface, like a book on a table."
                },
                {
                    question: "Which article is used before 'university'?",
                    options: ["a", "an", "the", "no article"],
                    correct: 0,
                    explanation: "'A' is used before 'university' because it starts with a consonant sound /ju/."
                }
            ]
        };

        // Motivational content
        const motivationalQuotes = [
            "The future belongs to those who believe in the beauty of their dreams. - Eleanor Roosevelt",
            "Success is not final, failure is not fatal: it is the courage to continue that counts. - Winston Churchill",
            "Believe you can and you're halfway there. - Theodore Roosevelt",
            "The only way to do great work is to love what you do. - Steve Jobs",
            "Education is the most powerful weapon which you can use to change the world. - Nelson Mandela",
            "Learning never exhausts the mind. - Leonardo da Vinci",
            "The expert in anything was once a beginner. - Helen Hayes"
        ];

        const studyTips = [
            "Take breaks every 25-30 minutes to keep your mind fresh and focused.",
            "Create a quiet, organized study space free from distractions.",
            "Use active recall: test yourself instead of just re-reading notes.",
            "Teach concepts to someone else - it helps solidify your understanding.",
            "Make flashcards for important formulas and key concepts.",
            "Practice past papers and sample questions regularly.",
            "Get enough sleep - your brain needs rest to consolidate memories."
        ];

        // App State
        let currentQuiz = null;
        let currentQuestionIndex = 0;
        let quizScore = 0;
        let userAnswers = [];

        // Initialize App
        function initApp() {
            loadProgress();
            loadDailyMotivation();
            setDefaultExamDate();
        }

        // Navigation
        function showSection(sectionId) {
            // Hide all sections
            document.querySelectorAll('.section').forEach(section => {
                section.classList.remove('active');
            });
            
            // Remove active class from all nav buttons
            document.querySelectorAll('.nav-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            
            // Show selected section
            document.getElementById(sectionId).classList.add('active');
            
            // Add active class to clicked button
            event.target.classList.add('active');
        }

        // Chatbot Functions
        function sendMessage() {
            const input = document.getElementById('chatInput');
            const message = input.value.trim();
            
            if (message === '') return;
            
            addMessage(message, 'user');
            input.value = '';
            
            // Process message
            setTimeout(() => {
                const response = getResponse(message.toLowerCase());
                addMessage(response, 'bot');
            }, 500);
        }

        function addMessage(message, sender) {
            const chatContainer = document.getElementById('chatContainer');
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${sender}-message`;
            
            if (sender === 'bot') {
                messageDiv.innerHTML = `<strong>SkillSpark Bot:</strong> ${message}`;
            } else {
                messageDiv.textContent = message;
            }
            
            chatContainer.appendChild(messageDiv);
            chatContainer.scrollTop = chatContainer.scrollHeight;
        }

        function getResponse(message) {
            // Simple keyword matching
            for (let keyword in knowledgeBase) {
                if (message.includes(keyword)) {
                    return knowledgeBase[keyword];
                }
            }
            
            // Fallback response
            return "Hmm... I don't know that yet! I'm still learning. Try asking a topic from Class 8 Science, Maths, or Grammar. ü§î";
        }

        function handleEnter(event) {
            if (event.key === 'Enter') {
                sendMessage();
            }
        }

        // Quiz Functions
        function startQuiz(subject) {
            currentQuiz = quizDatabase[subject];
            currentQuestionIndex = 0;
            quizScore = 0;
            userAnswers = [];
            
            displayQuestion();
        }

        function displayQuestion() {
            const container = document.getElementById('quizContainer');
            const question = currentQuiz[currentQuestionIndex];
            
            container.innerHTML = `
                <div class="quiz-container">
                    <h3>Question ${currentQuestionIndex + 1} of ${currentQuiz.length}</h3>
                    <div class="question">${question.question}</div>
                    <div class="options">
                        ${question.options.map((option, index) => `
                            <div class="option" onclick="selectOption(${index})">${option}</div>
                        `).join('')}
                    </div>
                    <button class="btn" onclick="nextQuestion()" id="nextBtn" style="display: none;">Next</button>
                </div>
            `;
        }

        function selectOption(index) {
            const options = document.querySelectorAll('.option');
            options.forEach(option => option.classList.remove('selected'));
            options[index].classList.add('selected');
            
            userAnswers[currentQuestionIndex] = index;
            document.getElementById('nextBtn').style.display = 'block';
        }

        function nextQuestion() {
            const question = currentQuiz[currentQuestionIndex];
            const selectedAnswer = userAnswers[currentQuestionIndex];
            
            // Show correct answer
            const options = document.querySelectorAll('.option');
            options[question.correct].classList.add('correct');
            if (selectedAnswer !== question.correct) {
                options[selectedAnswer].classList.add('incorrect');
            }
            
            // Check if answer is correct
            if (selectedAnswer === question.correct) {
                quizScore++;
            }
            
            // Show explanation
            const container = document.getElementById('quizContainer');
            container.innerHTML += `<div style="margin-top: 15px; padding: 10px; background: #e6f3ff; border-radius: 8px;"><strong>Explanation:</strong> ${question.explanation}</div>`;
            
            currentQuestionIndex++;
            
            if (currentQuestionIndex < currentQuiz.length) {
                setTimeout(() => {
                    displayQuestion();
                }, 2000);
            } else {
                setTimeout(() => {
                    showQuizResults();
                }, 2000);
            }
        }

        function showQuizResults() {
            const container = document.getElementById('quizContainer');
            const percentage = Math.round((quizScore / currentQuiz.length) * 100);
            
            container.innerHTML = `
                <div class="results-container">
                    <h3>Quiz Complete! üéâ</h3>
                    <div class="score-display">${quizScore}/${currentQuiz.length}</div>
                    <p>Your Score: ${percentage}%</p>
                    <button class="btn" onclick="location.reload()">Take Another Quiz</button>
                </div>
            `;
            
            // Update progress
            updateQuizProgress(percentage);
        }

        // Study Planner Functions
        function generatePlan() {
            const subjects = Array.from(document.getElementById('plannerSubjects').selectedOptions).map(option => option.value);
            const studyTime = parseInt(document.getElementById('studyTime').value);
            const examDate = new Date(document.getElementById('examDate').value);
            const today = new Date();
            
            if (subjects.length === 0) {
                alert('Please select at least one subject!');
                return;
            }
            
            if (examDate <= today) {
                alert('Please select a future exam date!');
                return;
            }
            
            const daysUntilExam = Math.ceil((examDate - today) / (1000 * 60 * 60 * 24));
            const timePerSubject = Math.floor(studyTime / subjects.length);
            
            const schedule = generateWeeklySchedule(subjects, timePerSubject, daysUntilExam);
            displaySchedule(schedule, daysUntilExam);
        }

        function generateWeeklySchedule(subjects, timePerSubject, totalDays) {
            const topics = {
                science: ['Force & Pressure', 'Friction', 'Sound', 'Cell Structure', 'Combustion', 'Light'],
                maths: ['Rational Numbers', 'Linear Equations', 'Exponents', 'Mensuration', 'Algebra', 'Factorization'],
                english: ['Tenses', 'Active-Passive Voice', 'Parts of Speech', 'Prepositions', 'Articles', 'Pronouns']
            };
            
            const schedule = [];
            const daysOfWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
            
            for (let week = 0; week < Math.min(4, Math.ceil(totalDays / 7)); week++) {
                for (let day = 0; day < 7; day++) {
                    const dayIndex = week * 7 + day;
                    if (dayIndex >= totalDays) break;
                    
                    const daySchedule = {
                        day: daysOfWeek[day],
                        week: week + 1,
                        subjects: []
                    };
                    
                    subjects.forEach((subject, index) => {
                        const topicIndex = Math.floor(dayIndex / subjects.length) % topics[subject].length;
                        daySchedule.subjects.push({
                            subject: subject.charAt(0).toUpperCase() + subject.slice(1),
                            topic: topics[subject][topicIndex],
                            time: timePerSubject
                        });
                    });
                    
                    schedule.push(daySchedule);
                }
            }
            
            return schedule;
        }

        function displaySchedule(schedule, totalDays) {
            const container = document.getElementById('scheduleDisplay');
            
            container.innerHTML = `
                <div class="schedule-display">
                    <h3>üìÖ Your Personalized Study Plan (${totalDays} days)</h3>
                    ${schedule.map(day => `
                        <div class="day-schedule">
                            <h4>${day.day} - Week ${day.week}</h4>
                            ${day.subjects.map(sub => `
                                <p><strong>${sub.subject}:</strong> ${sub.topic} (${sub.time}h)</p>
                            `).join('')}
                        </div>
                    `).join('')}
                </div>
            `;
        }

        function setDefaultExamDate() {
            const today = new Date();
            const defaultDate = new Date(today.getTime() + (30 * 24 * 60 * 60 * 1000)); // 30 days from now
            document.getElementById('examDate').value = defaultDate.toISOString().split('T')[0];
        }

        // Progress Functions
        function loadProgress() {
            const topics = parseInt(localStorage.getItem('completedTopics') || '0');
            const quizAvg = parseFloat(localStorage.getItem('quizAverage') || '0');
            const streak = parseInt(localStorage.getItem('studyStreak') || '0');
            
            updateProgressDisplay(topics, quizAvg, streak);
        }

        function updateProgressDisplay(topics, quizAvg, streak) {
            const topicsPercent = Math.min((topics / 30) * 100, 100);
            const streakPercent = Math.min((streak / 30) * 100, 100);
            
            document.getElementById('topicsProgress').style.width = topicsPercent + '%';
            document.getElementById('quizProgress').style.width = quizAvg + '%';
            document.getElementById('streakProgress').style.width = streakPercent + '%';
            
            document.getElementById('topicsText').textContent = `${topics}/30 topics completed`;
            document.getElementById('quizText').textContent = `Average: ${quizAvg.toFixed(1)}%`;
            document.getElementById('streakText').textContent = `${streak} days streak`;
        }

        function updateQuizProgress(newScore) {
            const currentScores = JSON.parse(localStorage.getItem('quizScores') || '[]');
            currentScores.push(newScore);
            
            // Keep only last 10 scores
            if (currentScores.length > 10) {
                currentScores.shift();
            }
            
            const average = currentScores.reduce((a, b) => a + b, 0) / currentScores.length;
            
            localStorage.setItem('quizScores', JSON.stringify(currentScores));
            localStorage.setItem('quizAverage', average.toString());
            
            // Update topics completed (assuming each quiz completion = 1 topic)
            const currentTopics = parseInt(localStorage.getItem('completedTopics') || '0');
            localStorage.setItem('completedTopics', (currentTopics + 1).toString());
            
            // Update streak
            const lastStudyDate = localStorage.getItem('lastStudyDate');
            const today = new Date().toDateString();
            let currentStreak = parseInt(localStorage.getItem('studyStreak') || '0');
            
            if (lastStudyDate !== today) {
                if (lastStudyDate === new Date(Date.now() - 86400000).toDateString()) {
                    // Consecutive day
                    currentStreak++;
                } else if (lastStudyDate !== today) {
                    // Streak broken or first time
                    currentStreak = 1;
                }
                
                localStorage.setItem('studyStreak', currentStreak.toString());
                localStorage.setItem('lastStudyDate', today);
            }
            
            loadProgress();
        }

        // Motivation Functions
        function loadDailyMotivation() {
            const today = new Date().toDateString();
            const lastQuoteDate = localStorage.getItem('lastQuoteDate');
            
            let quoteIndex, tipIndex;
            
            if (lastQuoteDate === today) {
                // Same day, use stored indices
                quoteIndex = parseInt(localStorage.getItem('dailyQuoteIndex') || '0');
                tipIndex = parseInt(localStorage.getItem('dailyTipIndex') || '0');
            } else {
                // New day, generate new indices
                quoteIndex = Math.floor(Math.random() * motivationalQuotes.length);
                tipIndex = Math.floor(Math.random() * studyTips.length);
                
                localStorage.setItem('lastQuoteDate', today);
                localStorage.setItem('dailyQuoteIndex', quoteIndex.toString());
                localStorage.setItem('dailyTipIndex', tipIndex.toString());
            }
            
            document.getElementById('dailyQuote').textContent = motivationalQuotes[quoteIndex];
            document.getElementById('studyTip').textContent = studyTips[tipIndex];
        }

        // Enhanced chatbot with more keywords
        function enhanceKnowledgeBase() {
            // Add more keywords for better matching
            const additionalKeywords = {
                "what is force": knowledgeBase["force"],
                "define force": knowledgeBase["force"],
                "what is pressure": knowledgeBase["pressure"],
                "define pressure": knowledgeBase["pressure"],
                "types of friction": knowledgeBase["friction"],
                "what is friction": knowledgeBase["friction"],
                "how is sound produced": knowledgeBase["sound"],
                "sound waves": knowledgeBase["sound"],
                "what is cell": knowledgeBase["cell"],
                "types of cells": knowledgeBase["cell"],
                "what is combustion": knowledgeBase["combustion"],
                "types of combustion": knowledgeBase["combustion"],
                "what are rational numbers": knowledgeBase["rational numbers"],
                "define rational numbers": knowledgeBase["rational numbers"],
                "how to solve linear equations": knowledgeBase["linear equations"],
                "linear equation": knowledgeBase["linear equations"],
                "laws of exponents": knowledgeBase["exponents"],
                "exponent rules": knowledgeBase["exponents"],
                "what is mensuration": knowledgeBase["mensuration"],
                "area formulas": knowledgeBase["mensuration"],
                "what is algebra": knowledgeBase["algebra"],
                "algebraic expressions": knowledgeBase["algebra"],
                "how to factorize": knowledgeBase["factorization"],
                "factorization methods": knowledgeBase["factorization"],
                "types of tenses": knowledgeBase["tenses"],
                "present tense": knowledgeBase["tenses"],
                "past tense": knowledgeBase["tenses"],
                "future tense": knowledgeBase["tenses"],
                "active and passive voice": knowledgeBase["active passive"],
                "voice change": knowledgeBase["active passive"],
                "8 parts of speech": knowledgeBase["parts of speech"],
                "noun verb adjective": knowledgeBase["parts of speech"],
                "list of prepositions": knowledgeBase["prepositions"],
                "preposition examples": knowledgeBase["prepositions"],
                "a an the": knowledgeBase["articles"],
                "definite indefinite articles": knowledgeBase["articles"],
                "types of pronouns": knowledgeBase["pronouns"],
                "personal pronouns": knowledgeBase["pronouns"]
            };
            
            Object.assign(knowledgeBase, additionalKeywords);
        }

        // Initialize enhanced chatbot
        enhanceKnowledgeBase();

        // Welcome animation
        function welcomeAnimation() {
            const header = document.querySelector('.header');
            header.style.transform = 'translateY(-20px)';
            header.style.opacity = '0';
            
            setTimeout(() => {
                header.style.transition = 'all 0.8s ease';
                header.style.transform = 'translateY(0)';
                header.style.opacity = '1';
            }, 100);
        }

        // Add some interactive features
        function addInteractiveFeatures() {
            // Add hover effects to messages
            document.addEventListener('click', (e) => {
                if (e.target.classList.contains('option')) {
                    // Add click animation
                    e.target.style.transform = 'scale(0.95)';
                    setTimeout(() => {
                        e.target.style.transform = 'scale(1)';
                    }, 150);
                }
            });

            // Add typing indicator for chatbot
            let typingTimeout;
            document.getElementById('chatInput').addEventListener('input', () => {
                clearTimeout(typingTimeout);
                typingTimeout = setTimeout(() => {
                    // Could add typing indicator here
                }, 1000);
            });
        }

        // Quick topic buttons for chatbot
        function addQuickTopics() {
            const chatContainer = document.getElementById('chatContainer');
            const quickTopics = document.createElement('div');
            quickTopics.innerHTML = `
                <div style="margin: 15px 0; text-align: center;">
                    <p style="margin-bottom: 10px; color: #666;">Quick Topics:</p>
                    <div style="display: flex; flex-wrap: wrap; gap: 8px; justify-content: center;">
                        <button class="btn" style="padding: 8px 12px; font-size: 14px;" onclick="askQuickQuestion('force')">Force</button>
                        <button class="btn" style="padding: 8px 12px; font-size: 14px;" onclick="askQuickQuestion('tenses')">Tenses</button>
                        <button class="btn" style="padding: 8px 12px; font-size: 14px;" onclick="askQuickQuestion('rational numbers')">Rational Numbers</button>
                        <button class="btn" style="padding: 8px 12px; font-size: 14px;" onclick="askQuickQuestion('cell')">Cell</button>
                    </div>
                </div>
            `;
            chatContainer.appendChild(quickTopics);
        }

        function askQuickQuestion(topic) {
            document.getElementById('chatInput').value = topic;
            sendMessage();
        }

        // Initialize everything when page loads
        window.onload = function() {
            initApp();
            welcomeAnimation();
            addInteractiveFeatures();
            addQuickTopics();
        };

        // Add keyboard shortcuts
        document.addEventListener('keydown', (e) => {
            if (e.ctrlKey && e.key === 'q') {
                e.preventDefault();
                showSection('quiz');
            } else if (e.ctrlKey && e.key === 'c') {
                e.preventDefault();
                showSection('chatbot');
            }
        });

        // Prevent form submission on enter in study planner
        document.addEventListener('keypress', (e) => {
            if (e.target.type !== 'text' && e.target.tagName !== 'INPUT') return;
            if (e.key === 'Enter' && e.target.id !== 'chatInput') {
                e.preventDefault();
            }
        });

        // Add smooth scrolling
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({ behavior: 'smooth' });
                }
            });
        });
    </script>
</body>
</html>
